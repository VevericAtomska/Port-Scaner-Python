import requests
import socket
import time


target_url = 'http://example.com'
target_ip = '192.168.1.1'
target_port = 80

def test_ip_block_evasion(url):
    headers_to_test = [
        'X-Forwarded-For', 'X-Originating-IP', 'X-Remote-IP', 'X-Remote-Addr',
        'X-Client-IP', 'X-Host', 'X-ProxyUser-Ip'
    ]
    spoofed_ips = ['127.0.0.1', '192.168.1.100', '10.0.0.1']
    print(f"\nTesting IP block evasion at {url}")
    for header in headers_to_test:
        for ip in spoofed_ips:
            headers = {header: ip}
            response = requests.get(url, headers=headers)
            if response.status_code != 403:
                print(f"Possible IP block evasion with header {header}: {ip}")
            else:
                print(f"Access blocked with header {header}: {ip}")

def grab_banner(ip, port):
    try:
        socket.setdefaulttimeout(2)
        s = socket.socket()
        s.connect((ip, port))
        banner = s.recv(1024).decode().strip()
        if banner:
            print(f"\nBanner from {ip}:{port}: {banner}")
        else:
            print(f"\nNo banner received from {ip}:{port}")
        s.close()
    except Exception as e:
        print(f"\nFailed to connect to {ip}:{port}: {str(e)}")

def test_rate_limiting(url, test_count=10, delay=1):
    print(f"\nTesting rate limiting at {url}")
    for i in range(test_count):
        response = requests.get(url)
        print(f"Request {i+1}: Status Code {response.status_code}")
        if response.status_code == 429:  
            print("Rate limiting detected.")
            return
        time.sleep(delay)
    print("No rate limiting detected.")

def main():
    print("Starting comprehensive security tests")
    test_ip_block_evasion(target_url)
    grab_banner(target_ip, target_port)
    test_rate_limiting(target_url)

main()
